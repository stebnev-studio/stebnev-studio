name: Deploy Nuxt 3 App

on:
  push:
    branches:
      - main # Запускать на пуш в ветку main

jobs:
  build:
    name: Build Nuxt App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Cache npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Nuxt App
        run: npm run build

      - name: List output files
        run: ls -la .output

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuxt-dist
          path: |
            .output/**
            package.json
            package-lock.json
            ecosystem.config.cjs
          if-no-files-found: error

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: nuxt-dist
          path: ./nuxt-dist

      - name: Deploy to VPS
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USER }}
          SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          set -e

          # Создаем директорию .ssh и устанавливаем права
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Добавляем приватный ключ в файл, сохраняя форматирование
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Добавляем хост в known_hosts
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

          # Копируем файлы сборки на сервер, удаляя старые файлы
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./nuxt-dist/ $USER@$HOST:/var/www/stebnev-studio.ru/html/

          # Выполняем команды на сервере
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            set -e

            echo "Проверка установленной версии Node.js..."
            NODE_VERSION=$(node -v || echo "v0.0.0")
            echo "Текущая версия Node.js: $NODE_VERSION"

            REQUIRED_NODE_VERSION="v18.0.0"

            # Функция для сравнения версий
            version_gt() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n1)" != "$1"; }

            if version_gt "$REQUIRED_NODE_VERSION" "$NODE_VERSION"; then
              echo "Установка Node.js $REQUIRED_NODE_VERSION..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Версия Node.js соответствует требованиям."
            fi

            echo "Установленная версия Node.js: $(node -v)"
            echo "Установленная версия npm: $(npm -v)"

            # Установка PM2 (если не установлен)
            if ! command -v pm2 > /dev/null 2>&1; then
              echo "Установка PM2..."
              sudo npm install -g pm2
            else
              echo "PM2 уже установлен."
            fi

            # Перейти в директорию приложения
            cd /var/www/stebnev-studio.ru/html

            # Установить зависимости
            echo "Установка зависимостей..."
            npm ci --production

            # Перезапустить приложение через PM2
            echo "Перезапуск приложения через PM2..."
            pm2 restart all || pm2 start ecosystem.config.cjs --env production

            # Сохранить процессы PM2
            pm2 save

            # Вывести статус PM2
            pm2 status
          EOF

          # Удаляем приватный ключ из runner
          rm -f ~/.ssh/id_rsa
        shell: bash
