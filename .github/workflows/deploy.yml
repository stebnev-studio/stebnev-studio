name: Deploy Nuxt 3 App

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Nuxt App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: List directories after install
        run: ls -la

      - name: Check nuxi version
        run: npx nuxi --version

      - name: List available scripts
        run: npm run

      - name: Build Nuxt App
        run: npx nuxi build

      - name: Verify build output
        run: |
          echo "Содержимое корневой директории после сборки:"
          ls -la
          echo "Проверка наличия .output директории:"
          if [ -d ".output" ]; then
            echo ".output directory exists."
            ls -la .output
          else
            echo ".output directory NOT found. Проверка наличия папки dist:"
            ls -la dist || echo "Ни .output, ни dist директории не найдены."
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuxt-dist
          path: |
            package.json
            package-lock.json
            ecosystem.config.cjs
            dist  
            .output
          if-no-files-found: error

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: nuxt-dist
          path: ./nuxt-dist

      - name: Verify artifacts
        run: |
          echo "Содержимое папки с артефактами:"
          ls -la ./nuxt-dist

      - name: Setup SSH
        env:
          SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          HOST: ${{ secrets.VPS_HOST }}
          USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            set -e
            cd /var/www/stebnev-studio.ru/html
            git pull
            npm run build
            pm2 restart ecosystem.config.cjs --env production || pm2 start ecosystem.config.cjs --env production
            pm2 save
          EOF

      - name: Remove SSH key
        run: rm -f ~/.ssh/id_rsa
